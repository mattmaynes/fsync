#!/bin/bash

# The MIT License (MIT)
# 
# Copyright (c) 2014 Matthew Maynes
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

NAME='fsync'
AUTHOR='Matthew Maynes'
VERSION='0.1.1'
HELP='
  Usage: fsync [OPTIONS ...] SOURCE DESTINATION
    Synchronizes the source directory with the destination directory.
    The directories will be synced initially and then a monitor will be
    attached to SOURCE to track any changes made.
    
  Options:
    -c, --checksum      Use checksum comparisons instead of time stamps. This takes 
                        slightly more resources to compute but is more accurate than 
                        times, especially when dealing with remote servers.
    -h, --help          Display this message and quit
    -l, --log-level     The level of logging to show. [DEBUG, INFO, WARN, ERROR]
    --progress          Display progress while synchronizing files
    -e, --exclude       A regular expression representing the files to exclude
    --version           Display the version of this script and exit
'

#####################
#     VARIABLES     #
#####################

# The source directory to watch for changes and 
# keep in sync with the destination.
#
# @type {string}
SRC=''

# The destination directory to keep synchronized with
# the source
#
# @type {string}
DEST=''

# A list of special arguments for rsync
#
# @type {string}
RSYNC='--recursive'

# A list of special arguments for fswatch
#
# @type {string}
FSWATCH='-0 --recursive'

# The paths that have been input. This is used when 
# parsing the command line arguments. It holds a copy
# of the input and destination locations
#
# @type {array}
PATHS=()

# The levels of logging that are available
#
# @type {array}
LOG_LEVELS=(DEBUG INFO WARN ERROR)

# The level of logging that should be printed to
# stdout
#
# @type {string}
LOG_LEVEL=2

#####################
#     FUNCTIONS     #
#####################

# Prints the help message for this script
# to stdout
function info {
    echo -e "$NAME $VERSION $HELP"
}

# Returns a numeric version of the given log level
#
# @param {string} The log level
#
# @return {number} The index of the item or -1 if not found
function logLevel {
    i=0
    for level in "${LOG_LEVELS[@]}"; do
        if [ "$level" = "$1"  ]; then
            echo $i
            return
        else
            ((i++))
        fi
    done
    echo "-1"
}
 
# Logs a message to stdout using a log level.
# This functions relies on the global LOG_LEVEL
# variable to determine what messages to show.
# 
# @param {string} The log level
# @param {string} The message to log
function log {
    if [ $(logLevel $1) -ge $LOG_LEVEL ]; then
        echo -e "[$1]\t$(date '+<%Y-%m-%dT%H:%M:%S>') $2"
    fi
}

# Returns a relative path name using a base and
# a path. The result is the path with /./ following
# the end of base path
#
# @param {string} The base path
# @param {string} The path to insert /./ into
#
# @return {string} The input path made relative
function prel {
    echo $(sed "s,$1,$1\/.\/,g" <<< $2)
}

# Watches a given directory using fswatch for a file 
# change. When there is a change it synchronizes
# a destination directory.
#
# @param {string} Any arguments for rsync
# @param {string} The source directory to watch
# @param {string} The destination to keep synchronized
function watch {
    log 'DEBUG' "Starting fswatch $FSWATCH $1"

    # While there are more changes synchronize them with
    # the destination location
    while read -d "" file;
    do
        # fswatch sometimes shows index files that have
        # changed but they don't actually exist. Ensure
        # that each changed file actually exists
        if [ -e $file  ];
        then
            # Report the change
            log 'INFO' "Change detected in $file";
            
            # Create the relative path
            change=$(prel $1 $file);

            # Synchronize the files by using rsync
            log 'DEBUG' "Issuing sync: rsync $RSYNC --relative $change $2";
            rsync $RSYNC --relative $change $2
        fi
    # fswatch behaves as a notification stream that will
    # trigger the while loop for each change. The < <()
    # syntax allows the output of fswatch to be piped 
    # into the input of the while loop
    done < <(fswatch $FSWATCH $1)
}


####################
#    PARSE ARGS    #
####################
IFS=' ' read -ra ARGV <<< $@
FDATA=0
RDATA=0
LDATA=0

# Iterate over each argument in the input vector
for i in "${ARGV[@]}"; do
    log 'DEBUG' "Parsing argument $i";
    case $i in
        '-h' | '--help' )
            info;
            exit 0;;
        '-l' | '--log-level' )
            LDATA=1;;
        '--version' )
            echo -e "$NAME $VERSION";
            exit 0;;
        '-c' |  '--checksum' | '--progress' )
            RSYNC="$RSYNC $i";;
        '-e' | '--exclude' )
            FDATA=1;
            FSWATCH="$FSWATCH $i";;
        # Default case for all flags
        -* )
            log 'WARN' "Unknown argument $i";;
        # Catch data and throw it in the PATHS array
        *)

            log 'DEBUG' "Found data $i"
            # If the data is for fswatch
            if [ $FDATA -eq 1 ]; then
                FDATA=0
                FSWATCH="$FSWATCH $i"
            elif [ $LDATA -eq 1 ]; then
                LDATA=0
                LOG_LEVEL=$(logLevel $i)
            # Otherwise it is a path
            else
                PATHS+=("$i")
            fi;;
    esac
done

# There must be at least 2 PATHS to continue. One for the
# input and one for the output. 
if [ ${#PATHS[@]} -lt 2 ]; then
    log 'ERROR' 'Missing input path';
    echo 'See fysnc --help for usage';
    exit 1;
fi

# Get a reference to the source and destination locations
SRC=${PATHS[0]};
DEST=${PATHS[1]};

# Fix the trailing slash in the destination and the source
if [ '/' != ${DEST[${#DEST[@]} - 1]} ]; then
    DEST="$DEST/"
fi

if [ '/' != ${SRC[${#SRC[@]} - 1]} ]; then
    SRC="$SRC/"
fi

# Perform an initial synchronization of the source location.
log 'INFO' "Performing initial synchronization of $SRC to $DEST"
log 'DEBUG' "Issuing sync: rsync $RSYNC $SRC $DEST"
rsync $RSYNC $SRC $DEST
log 'INFO' "Synchronization complete"

# Watch the source location for changes and sync the 
# destination when there is one
log 'INFO' "Watching $SRC for changes"
watch $SRC $DEST



